{"version":3,"sources":["services/neo.js","components/Loader/Loader.jsx","components/NeosList/NeosList.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["prepareDate","date","getFullYear","String","getMonth","padStart","getDate","join","getNeos","day","today","Date","startDate","endDate","URL","concat","fetch","then","response","ok","Error","json","data","neosData","Object","values","near_earth_objects","maxDiameter","Math","max","apply","_toConsumableArray","flatMap","neo","map","item","estimated_diameter","kilometers","estimated_diameter_max","hazardousCount","flat","filter","is_potentially_hazardous_asteroid","length","closestNeo","min","close_approach_data","miss_distance","fastestNeo","relative_velocity","kilometers_per_hour","catch","error","console","Loader","_jsx","className","children","NeosList","_useState","useState","_useState2","_slicedToArray","neos","setNeos","_useState3","_useState4","currentDay","setCurrentDay","loadNeosFromServer","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newNeo","wrap","_context","prev","next","sent","prevNeos","updatedNeos","push","shift","t0","stop","arguments","useEffect","updateCurrentDay","prevDay","interval","setInterval","_callee2","_context2","clearInterval","highestHazardousCounts","sort","a","b","slice","_jsxs","_Fragment","_ref3","classNames","some","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"sSAIMA,EAAc,SAACC,GAKnB,MAAO,CAJMA,EAAKC,cACJC,OAAOF,EAAKG,WAAa,GAAGC,SAAS,EAAG,KAC1CF,OAAOF,EAAKK,WAAWD,SAAS,EAAG,MAErBE,KAAK,IACjC,EAEaC,EAAU,SAACC,GACtB,IAAMC,EAAQ,IAAIC,KACZC,EAAYZ,EAChB,IAAIW,KAAKD,EAAMR,cAAeQ,EAAMN,WAAYK,IAE5CI,EAAUb,EACd,IAAIW,KAAKD,EAAMR,cAAeQ,EAAMN,WAAYK,IAG5CK,EAAG,oDAAAC,OAAuDH,EAAS,cAAAG,OAAaF,EAAO,aAAAE,OAnB/E,4CAqBd,OAAOC,MAAMF,GACVG,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAGZ,OAAOF,EAASG,MAClB,IACCJ,MAAK,SAACK,GACL,IAAMC,EAAWC,OAAOC,OAAOH,EAAKI,oBAE9BC,EAAcC,KAAKC,IAAGC,MAARF,KAAIG,YACnBR,EAASS,SAAQ,SAAAC,GAAG,OAAIA,EAAIC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,mBAAmBC,WAAWC,sBAAsB,GAAC,MAGjGC,EAAiBhB,EACpBiB,OACAC,QAAO,SAAAR,GAAG,OAAIA,EAAIS,iCAAiC,IAAEC,OAElDC,EAAahB,KAAKiB,IAAGf,MAARF,KAAIG,YAClBR,EACAiB,OACAN,KAAI,SAAAD,GAAG,OAAIA,EAAIa,oBAAoB,GAAGC,cAAcV,UAAU,MAG7DW,EAAapB,KAAKC,IAAGC,MAARF,KAAIG,YAClBR,EACAiB,OACAN,KAAI,SAAAD,GAAG,OAAIA,EAAIa,oBAAoB,GAAGG,kBAAkBC,mBAAmB,MAGhF,MAAO,CACLjD,KAAMW,EACNe,cACAY,iBACAK,aACAI,aAEJ,IACCG,OAAM,SAACC,GAEN,MADAC,QAAQD,MAAMA,GACR,IAAIhC,KACZ,GACJ,E,eC/DakC,EAAS,WAAH,OACjBC,cAAA,OAAKC,UAAU,SAAS,UAAQ,SAAQC,SACtCF,cAAA,OAAKC,UAAU,qBACX,ECEKE,EAAW,WACtB,IAAAC,EAAwBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,EAAoCL,mBAAS,GAAEM,EAAAJ,YAAAG,EAAA,GAAxCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAE1BG,EAAkB,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAnD,EAAAoD,EAAA,OAAAH,cAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEAvE,EAAQ2D,GAAY,KAAD,EAApC5C,EAAQsD,EAAAG,KACRL,EAAS,CACb1E,KAAMsB,EAAStB,KACf0B,YAAaJ,EAASI,YACtBY,eAAgBhB,EAASgB,eACzBK,WAAYrB,EAASqB,WACrBI,WAAYzB,EAASyB,YAGvBgB,GAAQ,SAACiB,GACP,IAAMC,EAAWnD,YAAOkD,GAQxB,OANAC,EAAYC,KAAKR,GAEbO,EAAYvC,OAAS,GACvBuC,EAAYE,QAGPF,CACT,IAAGL,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,SAEHxB,QAAQD,MAAKyB,EAAAQ,IAAQ,yBAAAR,EAAAS,OAAA,GAAAZ,EAAA,kBAExB,kBAzBuB,OAAAJ,EAAAxC,MAAA,KAAAyD,UAAA,KA2BxBC,qBAAU,WACR,IAAMC,EAAmB,SAACC,GACxB,OAAIA,IAAW,IAAI/E,MAAOL,UACjB,EAGFoF,EAAU,CACnB,EAEMC,EAAWC,YAAWrB,YAAAC,cAAAC,MAAC,SAAAoB,IAAA,OAAArB,cAAAI,MAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,cAAAe,EAAAf,KAAA,EACrBV,IAAqB,KAAD,EAC1BD,EAAcqB,GAAkB,wBAAAK,EAAAR,OAAA,GAAAO,EAAA,KAC/B,KAEH,OAAO,WACLE,cAAcJ,EAChB,CACF,GAAG,CAACxB,IAEJ,IAQM6B,EAPejE,YAAIgC,GAAMkC,MAC3B,SAACC,EAAGC,GAAC,OAAKA,EAAE5D,eAAiB2D,EAAE3D,cAAc,IAG7B6D,MAAM,EAAG,GAK7B,OACEC,eAAA,OAAA5C,SAAA,CACEF,cAAA,MAAAE,SAAI,+BAEJF,cAAA,MAAAE,SACmB,IAAhBM,EAAKpB,OACJY,cAACD,EAAM,IAEPC,cAAA+C,WAAA,CAAA7C,SACIM,EAAK7B,KAAI,SAAAqE,GAAA,IACTtG,EAAIsG,EAAJtG,KACA0B,EAAW4E,EAAX5E,YACAY,EAAcgE,EAAdhE,eACAK,EAAU2D,EAAV3D,WACAI,EAAUuD,EAAVvD,WAAU,OAEVqD,eAAA,MAEE7C,UAAWgD,IAAW,OAAQ,CAC5B,YAAaR,EAAuBS,MAClC,SAAAxE,GAAG,OAAIA,EAAIM,iBAAmBA,CAAc,MAE7CkB,SAAA,CAEH4C,eAAA,MAAI7C,UAAU,aAAYC,SAAA,CAAC,QAEzB,IAAA1C,OAAKd,MAEPoG,eAAA,KAAG7C,UAAU,aAAYC,SAAA,CAAC,+BAExB,IAAA1C,OAAKY,MAEP0E,eAAA,KAAG7C,UAAU,aAAYC,SAAA,CAAC,8BAExB,IAAA1C,OAAKwB,MAEP8D,eAAA,KAAG7C,UAAU,aAAYC,SAAA,CAAC,oBAExB,IAAA1C,OAAK6B,MAEPyD,eAAA,KAAG7C,UAAU,aAAYC,SAAA,CAAC,qBAExB,IAAA1C,OAAKiC,QAzBF/C,EA2BF,UAOnB,EC3GeyG,MARf,WACE,OACEnD,cAAA,OAAKC,UAAU,MAAKC,SAClBF,cAACG,EAAQ,KAGf,ECEeiD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB5F,MAAK,SAAAqD,GAAkD,IAA/CwC,EAAMxC,EAANwC,OAAQC,EAAMzC,EAANyC,OAAQC,EAAM1C,EAAN0C,OAAQC,EAAM3C,EAAN2C,OAAQC,EAAO5C,EAAP4C,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACV,GAEJ,ECJaO,IAASC,WAAWC,SAASC,eAAe,SAEpDC,OACHhE,cAACiE,IAAMC,WAAU,CAAAhE,SACfF,cAACmD,EAAG,OAORC,G","file":"static/js/main.c20a9de8.chunk.js","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable max-len */\nconst API_KEY = 'PXjG2k4gTiQT1uLnemaLCDAX3RDa7jRbL69WIROx';\n\nconst prepareDate = (date) => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n\n  return [year, month, day].join('-');\n};\n\nexport const getNeos = (day) => {\n  const today = new Date();\n  const startDate = prepareDate(\n    new Date(today.getFullYear(), today.getMonth(), day),\n  );\n  const endDate = prepareDate(\n    new Date(today.getFullYear(), today.getMonth(), day),\n  );\n\n  const URL = `https://api.nasa.gov/neo/rest/v1/feed?start_date=${startDate}&end_date=${endDate}&api_key=${API_KEY}`;\n\n  return fetch(URL)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    })\n    .then((data) => {\n      const neosData = Object.values(data.near_earth_objects);\n\n      const maxDiameter = Math.max(\n        ...neosData.flatMap(neo => neo.map(item => item.estimated_diameter.kilometers.estimated_diameter_max)),\n      );\n\n      const hazardousCount = neosData\n        .flat()\n        .filter(neo => neo.is_potentially_hazardous_asteroid).length;\n\n      const closestNeo = Math.min(\n        ...neosData\n          .flat()\n          .map(neo => neo.close_approach_data[0].miss_distance.kilometers),\n      );\n\n      const fastestNeo = Math.max(\n        ...neosData\n          .flat()\n          .map(neo => neo.close_approach_data[0].relative_velocity.kilometers_per_hour),\n      );\n\n      return {\n        date: startDate,\n        maxDiameter,\n        hazardousCount,\n        closestNeo,\n        fastestNeo,\n      };\n    })\n    .catch((error) => {\n      console.error(error);\n      throw new Error();\n    });\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable no-console */\nimport './NeosList.scss';\nimport classNames from 'classnames';\n\nimport React, { useState, useEffect } from 'react';\nimport { getNeos } from '../../services/neo';\nimport { Loader } from '../Loader';\n\nexport const NeosList = () => {\n  const [neos, setNeos] = useState([]);\n  const [currentDay, setCurrentDay] = useState(1);\n\n  const loadNeosFromServer = async() => {\n    try {\n      const neosData = await getNeos(currentDay);\n      const newNeo = {\n        date: neosData.date,\n        maxDiameter: neosData.maxDiameter,\n        hazardousCount: neosData.hazardousCount,\n        closestNeo: neosData.closestNeo,\n        fastestNeo: neosData.fastestNeo,\n      };\n\n      setNeos((prevNeos) => {\n        const updatedNeos = [...prevNeos];\n\n        updatedNeos.push(newNeo);\n\n        if (updatedNeos.length > 6) {\n          updatedNeos.shift();\n        }\n\n        return updatedNeos;\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    const updateCurrentDay = (prevDay) => {\n      if (prevDay >= new Date().getDate()) {\n        return 1;\n      }\n\n      return prevDay + 1;\n    };\n\n    const interval = setInterval(async() => {\n      await loadNeosFromServer();\n      setCurrentDay(updateCurrentDay);\n    }, 5000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentDay]);\n\n  const getHighestHazardousCounts = () => {\n    const sortedNeos = [...neos].sort(\n      (a, b) => b.hazardousCount - a.hazardousCount,\n    );\n\n    return sortedNeos.slice(0, 2);\n  };\n\n  const highestHazardousCounts = getHighestHazardousCounts();\n\n  return (\n    <div>\n      <h1>Near Orbital Objects (NEO)</h1>\n\n      <ul>\n        {neos.length === 0 ? (\n          <Loader />\n        ) : (\n          <>\n            { neos.map(({\n              date,\n              maxDiameter,\n              hazardousCount,\n              closestNeo,\n              fastestNeo,\n            }) => (\n              <li\n                key={date}\n                className={classNames('card', {\n                  'card--red': highestHazardousCounts.some(\n                    neo => neo.hazardousCount === hazardousCount,\n                  ),\n                })}\n              >\n                <h2 className=\"card__item\">\n                  Date:\n                  {` ${date}`}\n                </h2>\n                <p className=\"card__item\">\n                  Max Estimated Diameter (km):\n                  {` ${maxDiameter}`}\n                </p>\n                <p className=\"card__item\">\n                  Potentially Hazardous NEOs:\n                  {` ${hazardousCount}`}\n                </p>\n                <p className=\"card__item\">\n                  Closest NEO (km):\n                  {` ${closestNeo}`}\n                </p>\n                <p className=\"card__item\">\n                  Fastest NEO (kph):\n                  {` ${fastestNeo}`}\n                </p>\n              </li>\n            ))}\n          </>\n        )}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { NeosList } from './components/NeosList/NeosList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NeosList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}