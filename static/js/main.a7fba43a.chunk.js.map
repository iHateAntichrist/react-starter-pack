{"version":3,"sources":["services/neo.js","components/Loader/Loader.jsx","components/NeosList/NeosList.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["prepareDate","date","getFullYear","String","getMonth","padStart","getDate","join","getNeos","day","today","Date","startDate","endDate","URL","fetch","then","response","ok","Error","json","data","neosData","Object","values","near_earth_objects","maxDiameter","Math","max","flatMap","neo","map","item","estimated_diameter","kilometers","estimated_diameter_max","hazardousCount","flat","filter","is_potentially_hazardous_asteroid","length","closestNeo","min","close_approach_data","miss_distance","fastestNeo","relative_velocity","kilometers_per_hour","catch","error","console","Loader","className","data-cy","NeosList","useState","neos","setNeos","currentDay","setCurrentDay","loadNeosFromServer","a","newNeo","prevNeos","updatedNeos","push","shift","useEffect","updateCurrentDay","prevDay","interval","setInterval","clearInterval","highestHazardousCounts","sort","b","slice","classNames","some","random","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"uTAIMA,EAAc,SAACC,GAKnB,MAAO,CAJMA,EAAKC,cACJC,OAAOF,EAAKG,WAAa,GAAGC,SAAS,EAAG,KAC1CF,OAAOF,EAAKK,WAAWD,SAAS,EAAG,MAErBE,KAAK,MAGpBC,EAAU,SAACC,GACtB,IAAMC,EAAQ,IAAIC,KACZC,EAAYZ,EAChB,IAAIW,KAAKD,EAAMR,cAAeQ,EAAMN,WAAYK,IAE5CI,EAAUb,EACd,IAAIW,KAAKD,EAAMR,cAAeQ,EAAMN,WAAYK,IAG5CK,EAAG,2DAAuDF,EAAvD,qBAA6EC,EAA7E,oBAnBK,4CAqBd,OAAOE,MAAMD,GACVE,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAGZ,OAAOF,EAASG,UAEjBJ,MAAK,SAACK,GACL,IAAMC,EAAWC,OAAOC,OAAOH,EAAKI,oBAE9BC,EAAcC,KAAKC,IAAL,MAAAD,KAAI,YACnBL,EAASO,SAAQ,SAAAC,GAAG,OAAIA,EAAIC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,mBAAmBC,WAAWC,+BAG1EC,EAAiBd,EACpBe,OACAC,QAAO,SAAAR,GAAG,OAAIA,EAAIS,qCAAmCC,OAElDC,EAAad,KAAKe,IAAL,MAAAf,KAAI,YAClBL,EACAe,OACAN,KAAI,SAAAD,GAAG,OAAIA,EAAIa,oBAAoB,GAAGC,cAAcV,gBAGnDW,EAAalB,KAAKC,IAAL,MAAAD,KAAI,YAClBL,EACAe,OACAN,KAAI,SAAAD,GAAG,OAAIA,EAAIa,oBAAoB,GAAGG,kBAAkBC,yBAG7D,MAAO,CACL9C,KAAMW,EACNc,cACAU,iBACAK,aACAI,iBAGHG,OAAM,SAACC,GAEN,MADAC,QAAQD,MAAMA,GACR,IAAI9B,UC7DHgC,G,MAAS,kBACpB,qBAAKC,UAAU,SAASC,UAAQ,SAAhC,SACE,qBAAKD,UAAU,wBCINE,EAAW,WAAO,IAAD,EACJC,mBAAS,IADL,mBACrBC,EADqB,KACfC,EADe,OAEQF,mBAAS,GAFjB,mBAErBG,EAFqB,KAETC,EAFS,KAItBC,EAAkB,uCAAG,8BAAAC,EAAA,+EAEArD,EAAQkD,GAFR,OAEjBpC,EAFiB,OAGjBwC,EAAS,CACb7D,KAAMqB,EAASrB,KACfyB,YAAaJ,EAASI,YACtBU,eAAgBd,EAASc,eACzBK,WAAYnB,EAASmB,WACrBI,WAAYvB,EAASuB,YAGvBY,GAAQ,SAACM,GACP,IAAMC,EAAW,YAAOD,GAQxB,OANAC,EAAYC,KAAKH,GAEbE,EAAYxB,OAAS,GACvBwB,EAAYE,QAGPF,KApBc,gDAuBvBd,QAAQD,MAAR,MAvBuB,yDAAH,qDA2BxBkB,qBAAU,WACR,IAAMC,EAAmB,SAACC,GACxB,OAAIA,IAAW,IAAI1D,MAAOL,UACjB,EAGF+D,EAAU,GAGbC,EAAWC,YAAW,sBAAC,sBAAAV,EAAA,sEACrBD,IADqB,OAE3BD,EAAcS,GAFa,2CAG1B,KAEH,OAAO,WACLI,cAAcF,MAEf,CAACZ,IAEJ,IAQMe,EAPe,YAAIjB,GAAMkB,MAC3B,SAACb,EAAGc,GAAJ,OAAUA,EAAEvC,eAAiByB,EAAEzB,kBAGfwC,MAAM,EAAG,GAK7B,OACE,gCACE,4DAEA,6BACmB,IAAhBpB,EAAKhB,OACJ,cAAC,EAAD,IAEAgB,EAAKzB,KAAI,gBACP9B,EADO,EACPA,KACAyB,EAFO,EAEPA,YACAU,EAHO,EAGPA,eACAK,EAJO,EAIPA,WACAI,EALO,EAKPA,WALO,OAOP,qBAEEO,UAAWyB,IAAW,OAAQ,CAC5B,YAAaJ,EAAuBK,MAClC,SAAAhD,GAAG,OAAIA,EAAIM,iBAAmBA,OAJpC,UAQE,qBAAIgB,UAAU,aAAd,mBACUnD,KAEV,oBAAGmD,UAAU,aAAb,0CACgC1B,KAEhC,oBAAG0B,UAAU,aAAb,yCAC+BhB,KAE/B,oBAAGgB,UAAU,aAAb,+BACqBX,KAErB,oBAAGW,UAAU,aAAb,gCACsBP,OApBjBlB,KAAKoD,mBCzETC,MARf,WACE,OACE,qBAAK5B,UAAU,MAAf,SACE,cAAC,EAAD,OCKS6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnE,MAAK,YAAkD,IAA/CoE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDDO,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,OAOJb,M","file":"static/js/main.a7fba43a.chunk.js","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable max-len */\nconst API_KEY = 'PXjG2k4gTiQT1uLnemaLCDAX3RDa7jRbL69WIROx';\n\nconst prepareDate = (date) => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n\n  return [year, month, day].join('-');\n};\n\nexport const getNeos = (day) => {\n  const today = new Date();\n  const startDate = prepareDate(\n    new Date(today.getFullYear(), today.getMonth(), day),\n  );\n  const endDate = prepareDate(\n    new Date(today.getFullYear(), today.getMonth(), day),\n  );\n\n  const URL = `https://api.nasa.gov/neo/rest/v1/feed?start_date=${startDate}&end_date=${endDate}&api_key=${API_KEY}`;\n\n  return fetch(URL)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    })\n    .then((data) => {\n      const neosData = Object.values(data.near_earth_objects);\n\n      const maxDiameter = Math.max(\n        ...neosData.flatMap(neo => neo.map(item => item.estimated_diameter.kilometers.estimated_diameter_max)),\n      );\n\n      const hazardousCount = neosData\n        .flat()\n        .filter(neo => neo.is_potentially_hazardous_asteroid).length;\n\n      const closestNeo = Math.min(\n        ...neosData\n          .flat()\n          .map(neo => neo.close_approach_data[0].miss_distance.kilometers),\n      );\n\n      const fastestNeo = Math.max(\n        ...neosData\n          .flat()\n          .map(neo => neo.close_approach_data[0].relative_velocity.kilometers_per_hour),\n      );\n\n      return {\n        date: startDate,\n        maxDiameter,\n        hazardousCount,\n        closestNeo,\n        fastestNeo,\n      };\n    })\n    .catch((error) => {\n      console.error(error);\n      throw new Error();\n    });\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-one-expression-per-line */\nimport './NeosList.scss';\nimport classNames from 'classnames';\n\nimport React, { useEffect, useState } from 'react';\nimport { getNeos } from '../../services/neo';\nimport { Loader } from '../Loader';\n\nexport const NeosList = () => {\n  const [neos, setNeos] = useState([]);\n  const [currentDay, setCurrentDay] = useState(1);\n\n  const loadNeosFromServer = async() => {\n    try {\n      const neosData = await getNeos(currentDay);\n      const newNeo = {\n        date: neosData.date,\n        maxDiameter: neosData.maxDiameter,\n        hazardousCount: neosData.hazardousCount,\n        closestNeo: neosData.closestNeo,\n        fastestNeo: neosData.fastestNeo,\n      };\n\n      setNeos((prevNeos) => {\n        const updatedNeos = [...prevNeos];\n\n        updatedNeos.push(newNeo);\n\n        if (updatedNeos.length > 6) {\n          updatedNeos.shift();\n        }\n\n        return updatedNeos;\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    const updateCurrentDay = (prevDay) => {\n      if (prevDay >= new Date().getDate()) {\n        return 1;\n      }\n\n      return prevDay + 1;\n    };\n\n    const interval = setInterval(async() => {\n      await loadNeosFromServer();\n      setCurrentDay(updateCurrentDay);\n    }, 5000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentDay]);\n\n  const getHighestHazardousCounts = () => {\n    const sortedNeos = [...neos].sort(\n      (a, b) => b.hazardousCount - a.hazardousCount,\n    );\n\n    return sortedNeos.slice(0, 2);\n  };\n\n  const highestHazardousCounts = getHighestHazardousCounts();\n\n  return (\n    <div>\n      <h1>Near Orbital Objects (NEO)</h1>\n\n      <ul>\n        {neos.length === 0 ? (\n          <Loader />\n        ) : (\n          neos.map(({\n            date,\n            maxDiameter,\n            hazardousCount,\n            closestNeo,\n            fastestNeo,\n          }) => (\n            <li\n              key={Math.random()}\n              className={classNames('card', {\n                'card--red': highestHazardousCounts.some(\n                  neo => neo.hazardousCount === hazardousCount,\n                ),\n              })}\n            >\n              <h2 className=\"card__item\">\n                Date: { date }\n              </h2>\n              <p className=\"card__item\">\n                Max Estimated Diameter (km): {maxDiameter}\n              </p>\n              <p className=\"card__item\">\n                Potentially Hazardous NEOs: {hazardousCount}\n              </p>\n              <p className=\"card__item\">\n                Closest NEO (km): {closestNeo}\n              </p>\n              <p className=\"card__item\">\n                Fastest NEO (kph): {fastestNeo}\n              </p>\n            </li>\n          ))\n        )}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { NeosList } from './components/NeosList/NeosList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NeosList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}